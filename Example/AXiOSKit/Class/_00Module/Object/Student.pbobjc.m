// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Student.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Student.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Dog);

#pragma mark - StudentRoot

@implementation StudentRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - StudentRoot_FileDescriptor

static GPBFileDescriptor *StudentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Dog

@implementation Dog

@dynamic name;
@dynamic age;
@dynamic gender;

typedef struct Dog__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *gender;
  int64_t age;
} Dog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Dog_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Dog__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.clazz = Nil,
        .number = Dog_FieldNumber_Age,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Dog__storage_, age),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gender",
        .dataTypeSpecific.clazz = Nil,
        .number = Dog_FieldNumber_Gender,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Dog__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Dog class]
                                     rootClass:[StudentRoot class]
                                          file:StudentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Dog__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Student

@implementation Student

@dynamic name;
@dynamic age;
@dynamic gender;
@dynamic dogArray, dogArray_Count;
@dynamic hasDog2, dog2;

typedef struct Student__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *gender;
  NSMutableArray *dogArray;
  Dog *dog2;
  int64_t age;
} Student__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Student_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Student__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.clazz = Nil,
        .number = Student_FieldNumber_Age,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Student__storage_, age),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gender",
        .dataTypeSpecific.clazz = Nil,
        .number = Student_FieldNumber_Gender,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Student__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dogArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Dog),
        .number = Student_FieldNumber_DogArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Student__storage_, dogArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dog2",
        .dataTypeSpecific.clazz = GPBObjCClass(Dog),
        .number = Student_FieldNumber_Dog2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Student__storage_, dog2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Student class]
                                     rootClass:[StudentRoot class]
                                          file:StudentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Student__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
